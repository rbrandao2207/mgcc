<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book id="manual" lang="en">
  <bookinfo>
    <title>libpqxx tutorial</title>

    <authorgroup>
      <author>
	<firstname>Jeroen</firstname>
	<othername>T.</othername>
	<surname>Vermeulen</surname>
      </author>
    </authorgroup>

    <copyright>
      <year>2000â€”2020</year>
      <holder>
        Jeroen T. Vermeulen
      </holder>
    </copyright>
  </bookinfo>

  <chapter id="preface">
    <title>About libpqxx</title>

    <para>
      libpqxx is the C++ API for PostgreSQL.
    </para>

    <para>
      Since libpqxx builds on top of the C frontend
      libpq, you will need a working
      libpq library on your system prior to getting
      started with libpqxx.
    </para>

    <para>
      See the <ulink url="https://github.com/jtv/libpqxx/">Github page</ulink>
      for more information.
    </para>

  </chapter>

  <chapter id="classoverview">
    <title>Class overview</title>

    <para>
      To work with libpqxx, you need to be aware of at least the following
      classes.  These are all in a dedicated namespace,
      <literal>pqxx</literal>:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <literal>connection</literal> represents a connection from your
	  program to a PostgreSQL back-end server.
	  Naturally your program may open multiple connections, simultaneous or
	  not, to any number of databases.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>work</literal>, actually an alias for the
	  <literal>transaction</literal> class template, represents a
	  transaction being executed in the context of a
	  <literal>connection</literal>. This is a unit of work that must be
	  completed as a whole by the database backend.  If execution fails,
	  everything you did within that <literal>transaction</literal> is
          "rolled back" as if it had never happened.

	  <footnote>
	    <para>
	      Actually libpqxx provides three classes doing this at various
              levels of reliability, called <literal>nontransaction</literal>,
              <literal>transaction</literal>, and
              <literal>robusttransaction</literal> for different levels of
              reliability: respectively none, standard, and best.
	    </para>
	  </footnote>

	  You may execute any number of transactions on a single
	  <literal>connection</literal>, but only one at a time.
	</para>
      </listitem>

      <listitem>
	<para>
	  A <literal>result</literal> is a container holding the resulting data
	  coming out of a query or command executed in a
	  <literal>transaction</literal>.  It behaves just like a standard C++
	  container as found in the STL, although you can't modify its
          contents.  (You can assign or copy it cheaply though; it's basically
          a smart pointer).  The rows in the result in turn behave like
          non-modifiable containers as well.
	</para>
      </listitem>

    </itemizedlist>

    <para>
      I would also like to use this opportunity to plug the
      <function>esc</function> function, which you should use whenever you want
      to include a variable as a string in your SQL (eg. insert it into a text
      field in a table).  See below.
    </para>

    <para>
      There are other classes that may be of interest to you, but which you
      don't necessarily need to be aware of for writing programs.  You will
      probably want to look them up at some point when it becomes necessary to
      figure out complex compiler warnings.
    </para>

    <para>
      Some of the classes you may become interested in fairly quickly are:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  <literal>broken_connection</literal> is an exception type which
          libpqxx throws if it loses its connection to the back-end.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>sql_error</literal> is an exception type which indicates
          that a query did get to the back-end, but returned a failure.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>in_doubt_error</literal> is an exception class to indicate a
	  rare and difficult error condition.  Explaining this is a bit
          painful, since it sort of contradicts some of what we said above.
	</para>
	<para>
	  In theory, a "transaction" is an integral, atomic unit of work that
	  either fails or succeeds.  This is a massively useful and beautiful
          idea, but in practice there is nothing that cannot be broken.  There
          is a tiny risk that, like Schroedinger's Cat, the transaction can end
          up in an indeterminate state.  This happens when the connection to
          the backend is lost just when you were waiting for confirmation after
          completing your transaction.  Your transaction may have succeeded, or
          it may have failed, or it may even still be running.  Without a
          working connection, there is just no way for the server to tell the
          client code on your side!
	</para>

	<para>
	  When this happens, libpqxx throws an
          <literal>in_doubt_error</literal> on the client side, which you may
          want to <literal>catch</literal> as a special case.  If you do, make
          sure that all alarm go off.  And whatever you do, do not retry the
          transaction when this happens, because it may already have completed.
	</para>

	<para>
	  See also the description for <literal>robusttransaction</literal>,
	  which sacrifices some performance to minimize this risk, as well as
          transactors.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>nontransaction</literal> is just like a regular
	  <literal>transaction</literal> as far your code is concerned (except
	  that it's not a template).  The big difference is that where a
	  <literal>transaction</literal> opens a back-end transaction to keep
          your view and modifications of the database atomic, a
          <literal>nontransaction</literal> does <emphasis>nothing</emphasis>
          to maintain integrity.  It just passes your queries directly to the
          database, with no enclosing transaction.
        </para>
        <para>
          The other transaction classes are derived from
          <literal>dbtransaction</literal>, an abstract class that expresses
          the presence of a real backend transaction.  But
          <literal>nontransaction</literal> is not, since it does not open
          "a transaction on the DB."
	</para>
	<para>
	  A <literal>nontransaction</literal> may give you better performance
          if your transaction does not modify the database.  But if it does
          make changes in the database, it may have unforeseen implications
	  if you expect certain levels of consistency in the database --
          especially if other processes or threads may be modifying the
          database at the same time.  And, in cases where you do make changes
          to the database, a regular transaction is often faster because some
          work on the server needs to be done only once, rather than once per
          statement.
        </para>
        <para>
          You'll probably only want to use <literal>nontransaction</literal>
	  in the following cases:
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      If you only want to read from the database, not modify it, and
	      you know that the data is not going to be updated while your
	      program is running.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      If you are interested in always getting the very latest
	      information out of your database, even if that means that you may
	      not get a temporally consistent view of the database.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      When making changes to the database schema; some operations may
	      not be supported by the backend inside backend transactions.
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>

      <listitem>
	<para>
	  <literal>robusttransaction</literal> (a template just like
	  <literal>transaction</literal>) is essentially the same as a
	  <literal>transaction</literal>, ie. an atomic unit of work.  The
	  difference is that it works harder to prevent
          <literal>in_doubt_error</literal>s from happening.  This comes at the
          cost of some performance, which is one reason why this behaviour
          isn't the default.  And since it's a little more complicated than a
          regular transaction, it could actually fail <emphasis>more</emphasis>
          than a normal transaction.  It just tries to give you more certainty
          about whether it failed.
	</para>

	<para>
	  Use this class instead of plain old <literal>transaction</literal> if
	  you get <literal>in_doubt_error</literal>s in your application -- but
	  only <emphasis>after</emphasis> thoroughly inspecting your code for
	  bugs that might be causing the problem, or you'll only be hiding
	  glitches that should be fixed instead.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>transaction_base</literal> defines the common public
	  interface for the <literal>transaction</literal>-like classes:
	  <literal>nontransaction</literal>,
	  <literal>robusttransaction</literal>, and
	  <literal>transaction</literal> itself.  To look up methods available
	  in these classes, see the definition (or documentation) for
	  <literal>transaction_base</literal> instead.
	</para>
	<para>
	  You'll usually want to refer to the default
	  <literal>transaction</literal> type as <literal>work</literal>, an
	  alias that means "<literal>transaction</literal> with default
	  (read-committed) isolation level."
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>transactor&lt;&gt;</literal> provides a framework that makes
	  it easier for you to write correct, robust code to be executed in a
          transaction.  You write your transaction code as something that can
          be called like a function: a lambda, a regular function, or an object
          with a <literal>operator()</literal> (also known as a functor).
	</para>

	<para>
          The code which you put inside your transactor starts a transaction,
          does what it needs to do, then commits the transaction.  It may also
          open its own connection first.
	</para>

	<para>
          You pass your transactor to a <literal>perform</literal> function,
          which executes it.  Pretty straightforward, and not much different
          from just calling your code yourself.  The difference is in what
          happens if there's an error while executing.  If the error is of a
          transient kind, e.g. because of a deadlock or a failed connection,
          the <literal>perform</literal> function calls your transactor again.
	</para>

	<para>
          This does mean that you must write your transactor as a transaction
          "on both sides."  It's not enough to encapsulate its interaction with
          the database in a transaction.  You must also make sure that it does
          not change your application's state on the client side until the
          transaction commits.  It is this structure, not the framework code,
          which makes transactors useful.  It's what lets libpqxx ensure that
          your transaction either completes, exactly once, or does nothing at
          all.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>notification_receiver</literal> is an instance of the
	  Observer design pattern.  Any code connected to a backend may flag an
	  event using the PostgreSQL <literal>NOTIFY</literal> command.
          Frontends connected to that same backend database may be listening
          for an event of that name to occur.
	</para>
	<para>
	  A frontend using libpqxx does this by registering an observer object
          derived from <literal>notification_receiver</literal>, which libpqxx
          will invoke to handle the event when it occurs.
	</para>

	<para>
	  Something every programmer using notification receivers in PostgreSQL
	  should know, by the way, is that notifications are not delivered to
	  your program while it is inside a back-end transaction.  Nor are they
	  sent until the notifying process has committed any transaction it may
	  be in.  This makes sense from a correctness point of view (otherwise
	  your processing of the event might get rolled back just because the
	  transaction you're in happens to fail), but may be a little confusing
	  to the unaware programmer.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>row</literal> refers to a row of data within a
	  <literal>result</literal> object.  It acts as a container of
          <literal>field</literal>s.
	</para>
      </listitem>

      <listitem>
	<para>
	  <literal>field</literal> refers to one field within a
	  <literal>row</literal>.  A <literal>field</literal> contains one
	  retrieved value such as a number or a string, and can be read into
	  variables of various types such as <literal>int</literal>s or
	  <literal>string</literal>s.
	</para>
      </listitem>

    </itemizedlist>

    <para>
      Finally, there are also some functions that you may want to know about,
      that live alone in the <literal>pqxx</literal> namespace without being
      part of any class:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <function>esc</function>, found in the connection and transaction
          classes, is the canonical way to use strings in your SQL.  This
          function escapes any quotes, backslashes, and other characters in
          your input string that would otherwise cause syntax errors (or worse,
          security holes) in your queries when included directly.
	</para>

	<para>
	  <emphasis>Use these functions</emphasis> whenever you want to have a
	  variable string in your SQL queries.  If you don't, you'll be left
	  with annoying bugs or possibly even security holes in your program.
	  Use this function, use this function, use this function.  Please.
	  Make me proud.
	</para>
      </listitem>

      <listitem>
	<para>
	  <function>to_string</function> knows how to render many types of
	  values as strings.  The libpqxx code uses this internally to convert
	  values being sent to the backend.  The function does not localise its
          output.
	</para>
      </listitem>

      <listitem>
	<para>
	  <function>from_string</function> is the inverse of
	  <function>to_string</function>.  Functions such as
	  <function>field::to()</function> use this to convert the incoming
	  field data from the postgres text format to a C++ type in your client
          application.
	</para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="tutorial">
    <title>Tutorial</title>

    <section id="before">
      <title>Before we begin programming</title>

      <section id="abouttutorial">
	<title>This document</title>

	<para>
	  This frontend library builds on top of the <filename>libpq</filename>
          frontend library, which defines PostgreSQL's C API.
	  Therefore this tutorial will sometimes refer to the libpq
          documentation rather than repeat what is said there.  We did not do
          it this way to annoy you, but to keep the libpqxx documentation from
          falling out of date with any changes in the C frontend.  Please bear
          with us.
	</para>

	<para>
	  If you're ever in doubt about how to use the basic features of
          libpqxx, take a look at the test suite in the <literal>test</literal>
          directory.  The code there should help give you an idea.
	</para>

	<para>
	  Don't let that keep you from submitting a request for improved
          documentation though.  Your questions define what this tutorial needs
          to say!
	</para>
      </section>

      <section id="cpp-conventions">
	<title>C++ conventions</title>

	<para>
	  All definitions in libpqxx reside in a namespace called
          <literal>pqxx</literal>.
	</para>
      </section>
    </section>

    <section id="connectionsetup">
      <title>Setting up a connection</title>

      <para>
	The very first thing to do before we can begin working with a database,
        is actually connect to one.  We do this by creating a
	<literal>connection</literal> object that will serve as our "handle"
	on the connection:
      </para>

      <programlisting>
	connection Conn("postgresql://localhost/test");
      </programlisting>

      <para>
        This gives us a connection object called <literal>Conn</literal>.
      </para>

      <para>
	The <literal>connection</literal> constructor here takes one argument,
	the "connect string."  The connection string may specify which host on
        the network runs the database backend we wish to connect to; which
        database we're interested in; which user name we'll be using to log in;
        etc.  Refer to the libpq <function>connect</function> call for a
	complete definition of what may go into the connect string.  In the
	example we're connecting to a database <literal>test</literal> residing
	on the local machine.  By default the client will try to connect to a
        server running on the local machine.
      </para>

      <para>
	The <literal>connection</literal> can now act as a "service counter"
	for our database; your client will use it to perform one or more
	transactions related to the database.
      </para>

      <para>
	You can't copy or assign connections, with the exception of move
        construction or move assignment.  You can move a connection object, but
        there are things you can do with the connection that make moving it
        impossible.  For instance, once you've registered an error handler on
        your connection, any attempt to move the the connection will produce an
        exception.
      </para>

      <caution>
	<para>
	  As a matter of design, libpqxx will not
	  allow you to perform queries on the <literal>connection</literal>
	  directly.  You will need to open a transaction instead.
	</para>

	<para>
	  See the section on transactions below.
	</para>
      </caution>
    </section>

    <section id="trans-performing">
      <title>Performing a transaction</title>

      <section id="trans-whatis">
	<title>What's a Transaction?</title>

	<para>
	  A transaction demarcates a "unit of work" operating on the database,
	  ie. a series of operations that must either complete successfully, or
	  if it is aborted at any stage, must not affect the data in the
	  database at all.  The step of completing a transaction is called the
          "commit" operation, and the process of aborting it and undoing any
          changes it may have made is called "rollback."
	</para>

	<para>
	  All access to the database in libpqxx must go through a transaction
          object, so it's essential to learn about the transaction classes.
	</para>
      </section>

      <section id="trans-creating">
	<title>Creating a transaction object</title>

	<para>
	  When creating a transaction, pass your <literal>connection</literal>
	  object to the constructor, and optionally an identifying name for
          your transaction.  The name need not be unique.  It's just there to
          make error messages a bit easier to debug.

	  <programlisting>
	    transaction&lt;&gt; Xaction(Conn, "DemoTransaction");
	  </programlisting>

	  Or, alternatively (once you get fed up with typing
	  <literal>transaction&lt;&gt;</literal>):

	  <programlisting>
	    work Xaction(Conn, "DemoTransaction");
	  </programlisting>
	</para>

	<para>
	  The lifetime of the transaction object demarcates the unit of work.
	  Its construction marks the beginning of the transaction, and its
	  destruction means that the transaction is ended--whether through
	  commit or rollback.
	</para>

	<para>
	  The transaction class hierarchy is built on the principle of
          "explicit commit," ie. the commit operation must always be explicit
          in the code.  If the transaction is destroyed before there was a
          commit, that implicitly aborts (or "rolls back") the transaction.
	</para>

	<para>
	  Destroying the <emphasis>connection</emphasis> object while the
          <emphasis>transaction</emphasis> still exists is an error that may
          result in a program crash.  Transactions cannot be copied, nor
          assigned, nor constructed without a connection (default-constructed).
          Attempts to do any of these will result in compile errors.
	</para>
      </section>
    </section>

    <section id="trans-ending">
      <title>Ending a transaction</title>
      <para>
	A transaction ends either successfully through an explicit commit
	command, or unsuccessfully in any of a number of ways.  The following
	are the ways to end a transaction:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    You can commit the transaction by calling its
	    <literal>commit</literal> member function:
	  </para>
	  <programlisting>
	    Xaction.commit();
	  </programlisting>

	  <para>
	    This sends the commit operation to the backend.  If the transaction
            throws an error, this is the last point where that can happen.  The
            only exceptions that may be generated by <literal>Xaction</literal>
            beyond this point are related to incorrect handling of the
            transaction object, eg. if you first commit
            <literal>Xaction</literal> and then abort it; or runtime errors
            such as memory running out.
	  </para>

	  <para>
	    Any streams or cursors nested within the transaction must have been
            closed before the <literal>commit()</literal>.  To do otherwise
            could possibly allow a transaction to be committed before all
            related actions had completed.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A transaction is aborted if it gets destroyed without having been
	    explicitly committed:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <programlisting>
		{
		work Xaction(Conn, "DemoTransaction");

		// (Queries)

		} // Xaction destroyed here
	      </programlisting>
	    </listitem>

	    <listitem>
	      <programlisting>
		work *XactionP = new work(Conn, "DemoTransaction");

		// (Queries)

		delete XactionP; // Xaction destroyed here
	      </programlisting>
	    </listitem>

	    <listitem>
	      <programlisting>
		try
		{
		work Xaction(Conn, "DemoTransaction");

		// (Queries)

		Xaction.commit();
		// If we get here, Xaction is committed
		}
		catch (...)
		{
		// If we get here, Xaction has been rolled back
		}
	      </programlisting>
	    </listitem>

	  </itemizedlist>
	  <para>
	    No matter where exactly the decision to abort is made, the actual
	    abort operation is sent to the backend when the transaction's
	    destructor is called.  If the abort fails, eg. because the
	    network connection has been lost, no error is reported and the
            transaction will die of natural causes.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    If a database error occurs during the transaction, such as an SQL
	    syntax error or lost connection to the backend, the transaction
	    is aborted.
	  </para>

	  <programlisting>
	    work Xaction(Conn, "DemoTransaction");
	    try
	    {
	    // (Queries)
	    Xaction.exec("SELECT !?^H^H^H^H");	// Fails: SQL syntax error
	    }
	    catch (...)
	    {
	    }
	    Xaction.commit(); // ERROR: Xaction has already aborted!
	  </programlisting>
	</listitem>

      </itemizedlist>
      <para>
        After a commit or after an abort, the transaction will no longer accept
        any queries to execute.  Ending a transaction more than once is also an
        error, except that aborting it multiple times is tolerated to
        facilitate error handling.
      </para>
    </section>

    <section id="queries">
      <title>Executing queries</title>
      <para>
	So let's execute an actual query.  There is no "query class" in
	libpqxx; we really do try to keep your life simple.
      </para>

      <para>
	You execute queries within a transaction, by passing the query string
	to the transaction object's <function>exec</function> method or one of
        its variants.  If the query fails to complete successfully, these
        methods will throw the appropriate exception.
      </para>

      <para>
	The query itself is a standard C string in this case, ie. a
	<literal>char const *</literal> but you'll frequently want to use a C++
	<literal>string</literal> to make it easy to include variables:
      </para>

      <programlisting>
	void DeleteEntry(work &amp;T, string Table, long ID)
	{
	T.exec("DELETE FROM " + Table + " WHERE ID=" + to_string(ID));
	}
      </programlisting>

      <para>
        In some places, even <literal>stringstream</literal>s will work, so
	you can use the full stream formatting capabilities, locales etc. in
	the standard C++ library to compose your SQL queries.
      </para>

    </section>

    <section id="queryresults">
      <title>Getting query results</title>

      <para>
	Obviously not all queries are commands -- the more common kind actually
	returns useful data.  Result data in libpqxx are encapsulated in a
	<literal>result</literal> object, which acts as a container.
      </para>

      <programlisting>
	result R = T.exec("SELECT firstname FROM employee WHERE lastname='Ng'");
      </programlisting>

      <para>
	This executes a query on the database, collects all matching data, and
	stores it in the form of a <literal>result</literal>.
      </para>

      <para>
        There are several ways to get at the individual rows in a
	<literal>result</literal>.  You can index the result with the array
	index operator <literal>[]</literal>, or call the
        <function>at</function> member function.  There are also random-access
        iterators, and you can iterate the rows in a result.  Each of these
	will give you a <literal>row</literal> object.  You again get the same
        options for accessing the fields in the row.

	<footnote>
	  <para>
	    The difference between <literal>[]</literal> and
	    <function>at</function> is that the latter is guaranteed to perform
	    bounds-checking, throwing an exception if you pass it an illegal
	    index value.  With the array index operator you may get slightly
	    better performance, but attempting to address a nonexistent row or
	    field will result in undefined behaviour such as program crashes or
	    inexplicably strange results.
	  </para>
	</footnote>.
      </para>

      <para>
	Thus, <literal>R[0]</literal> will return the first ("zeroth") row
	in R.  You can get the same row as <literal>*R.begin()</literal>.

	What you'll usually do is index the row directly to get at the field
	you want, e.g. <literal>R[0][0]</literal> to get the first field of
	the first row.
      </para>

      <para>
        Of course you can also iterate the rows in a result, whether with C++
        iteration syntax or a classic C-style loop:
      </para>

      <programlisting>
        for (auto const row: my_result) process(row);
      </programlisting>

      <programlisting>
        for (auto row = std::begin(my_result); row != my_result.end(); row++)
          process(*row);
      </programlisting>

      <para>
        Once you have a row, you'll want to access its fields.  You can do
        that in all the same way you accessed rows in a result.  But in
        addition, you can also index a row by name instead of by number:
      </para>

      <programlisting>
	// Process employees' names one by one.  process_names() doesn't know
        // exactly what columns are going to be in R, but there must be one
        // called "lastname".
	void process_names(result R)
	{
	  for (result::size_type i = 0; i != R.size(); ++i)
	  process(R[i]["lastname"]);
	}
      </programlisting>

      <para>
	There's one more trick for both result iterators and row iterators.
	You can index them directly using the array index operator, just like
        C++-native pointers can work a lot like arrays:
	<literal>R.begin()[0]</literal> gets you the first field of
	<literal>R</literal>'s first row, just like <literal>R[0][0]</literal>
        would<footnote>
	  <para>
	    Or <literal>(*R.begin())[0]</literal>.  It may seem quirky to
	    have <literal>R.begin()</literal> and <literal>*R.begin()</literal>
            mean the same thing, but it makes practical use of iterators a lot
            easier.
	  </para>
	</footnote>.
      </para>

      <para>
	There is also more than one way to read a field's value.  Let's start
        out with the easy one, <function>c_str</function>, which reads the
        value as a C string:
      </para>

      <programlisting>
	cout &lt;&lt; "Name: " &lt;&lt; F.c_str() &lt;&lt; endl;
      </programlisting>

      <para>
	This will return the empty string (<literal>""</literal>) if field F
	has the null value.  Use <function>is_null</function> to see if this
	is the case:
      </para>

      <programlisting>
	if (!F.is_null())
	cout &lt;&lt; "Name: " &lt;&lt; F.c_str() &lt;&lt; endl;
      </programlisting>
    </section>

    <section id="stringconversion">
      <title>String conversions</title>
      <para>
	In practice of course, not all data is going to consist of strings.
	Many fields will be integer values, or decimals, or Booleans.  To
	convert the field's value to one of these, use its
	<function>to</function> method.  This adapts itself to the type of
	variable you pass it, expecting the field value to be of an
	appropriate form for that type.  For convenience,
	<function>to</function> returns <literal>false</literal> if the field
	had the null value, and <literal>true</literal> otherwise.  In the
	former case, the variable will retain the value it had before the
	call.
      </para>

      <programlisting>
	// Pay an employee their salary.  Add bonus for managers.
	// The employee row must contain the fields
	void PaySalary(result::const_iterator empl)
	{
	long id;
	float salary;
	bool is_manager=false;

	// Get id.  Must never be null.
	if (!empl[0].to(id)) throw runtime_error("No id!");

	// Get salary.  If this employee has no salary, skip payment.
	if (!empl[1].to(salary)) return;

	// Get manager status.  If field is null, this will leave the
        // variable's original value unchanged.
	empl[2].to(is_manager);

	if (is_manager) salary += Bonus;

	TransferMoney(id, salary);
	}
      </programlisting>

      <para>
	If conversion fails, e.g. when trying to convert a floating-point
	value to an integer variable, <function>to</function> will throw a
	<literal>runtime_error</literal>.
      </para>
    </section>
  </chapter>
</book>
<!-- vi: sw=2
  -->
